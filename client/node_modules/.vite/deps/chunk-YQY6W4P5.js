import {
  Paper_default,
  init_Paper
} from "./chunk-6XB2Z6BV.js";
import {
  capitalize_default,
  init_capitalize
} from "./chunk-3PCQMBGK.js";
import {
  init_styled,
  styled_default
} from "./chunk-5J4JEA36.js";
import {
  init_DefaultPropsProvider,
  useDefaultProps
} from "./chunk-QRVXN4RP.js";
import {
  composeClasses,
  generateUtilityClass,
  generateUtilityClasses,
  init_composeClasses,
  init_generateUtilityClass,
  init_generateUtilityClasses,
  require_prop_types
} from "./chunk-M2GKXEPG.js";
import {
  _extends,
  _objectWithoutPropertiesLoose,
  init_extends,
  init_objectWithoutPropertiesLoose
} from "./chunk-UROGHDHP.js";
import {
  clsx_default,
  init_clsx
} from "./chunk-PGWY4NFG.js";
import {
  require_jsx_runtime
} from "./chunk-YPGNGA4Z.js";
import {
  require_react
} from "./chunk-NKBGLYTV.js";
import {
  __esm,
  __toESM
} from "./chunk-PLDDJCW6.js";

// node_modules/@mui/material/AppBar/appBarClasses.js
function getAppBarUtilityClass(slot) {
  return generateUtilityClass("MuiAppBar", slot);
}
var appBarClasses, appBarClasses_default;
var init_appBarClasses = __esm({
  "node_modules/@mui/material/AppBar/appBarClasses.js"() {
    init_generateUtilityClasses();
    init_generateUtilityClass();
    appBarClasses = generateUtilityClasses("MuiAppBar", ["root", "positionFixed", "positionAbsolute", "positionSticky", "positionStatic", "positionRelative", "colorDefault", "colorPrimary", "colorSecondary", "colorInherit", "colorTransparent", "colorError", "colorInfo", "colorSuccess", "colorWarning"]);
    appBarClasses_default = appBarClasses;
  }
});

// node_modules/@mui/material/AppBar/AppBar.js
var React, import_prop_types, import_jsx_runtime, _excluded, useUtilityClasses, joinVars, AppBarRoot, AppBar, AppBar_default;
var init_AppBar = __esm({
  "node_modules/@mui/material/AppBar/AppBar.js"() {
    "use client";
    init_objectWithoutPropertiesLoose();
    init_extends();
    React = __toESM(require_react());
    import_prop_types = __toESM(require_prop_types());
    init_clsx();
    init_composeClasses();
    init_styled();
    init_DefaultPropsProvider();
    init_capitalize();
    init_Paper();
    init_appBarClasses();
    import_jsx_runtime = __toESM(require_jsx_runtime());
    _excluded = ["className", "color", "enableColorOnDark", "position"];
    useUtilityClasses = (ownerState) => {
      const {
        color,
        position,
        classes
      } = ownerState;
      const slots = {
        root: ["root", `color${capitalize_default(color)}`, `position${capitalize_default(position)}`]
      };
      return composeClasses(slots, getAppBarUtilityClass, classes);
    };
    joinVars = (var1, var2) => var1 ? `${var1 == null ? void 0 : var1.replace(")", "")}, ${var2})` : var2;
    AppBarRoot = styled_default(Paper_default, {
      name: "MuiAppBar",
      slot: "Root",
      overridesResolver: (props, styles) => {
        const {
          ownerState
        } = props;
        return [styles.root, styles[`position${capitalize_default(ownerState.position)}`], styles[`color${capitalize_default(ownerState.color)}`]];
      }
    })(({
      theme,
      ownerState
    }) => {
      const backgroundColorDefault = theme.palette.mode === "light" ? theme.palette.grey[100] : theme.palette.grey[900];
      return _extends({
        display: "flex",
        flexDirection: "column",
        width: "100%",
        boxSizing: "border-box",
        // Prevent padding issue with the Modal and fixed positioned AppBar.
        flexShrink: 0
      }, ownerState.position === "fixed" && {
        position: "fixed",
        zIndex: (theme.vars || theme).zIndex.appBar,
        top: 0,
        left: "auto",
        right: 0,
        "@media print": {
          // Prevent the app bar to be visible on each printed page.
          position: "absolute"
        }
      }, ownerState.position === "absolute" && {
        position: "absolute",
        zIndex: (theme.vars || theme).zIndex.appBar,
        top: 0,
        left: "auto",
        right: 0
      }, ownerState.position === "sticky" && {
        // ⚠️ sticky is not supported by IE11.
        position: "sticky",
        zIndex: (theme.vars || theme).zIndex.appBar,
        top: 0,
        left: "auto",
        right: 0
      }, ownerState.position === "static" && {
        position: "static"
      }, ownerState.position === "relative" && {
        position: "relative"
      }, !theme.vars && _extends({}, ownerState.color === "default" && {
        backgroundColor: backgroundColorDefault,
        color: theme.palette.getContrastText(backgroundColorDefault)
      }, ownerState.color && ownerState.color !== "default" && ownerState.color !== "inherit" && ownerState.color !== "transparent" && {
        backgroundColor: theme.palette[ownerState.color].main,
        color: theme.palette[ownerState.color].contrastText
      }, ownerState.color === "inherit" && {
        color: "inherit"
      }, theme.palette.mode === "dark" && !ownerState.enableColorOnDark && {
        backgroundColor: null,
        color: null
      }, ownerState.color === "transparent" && _extends({
        backgroundColor: "transparent",
        color: "inherit"
      }, theme.palette.mode === "dark" && {
        backgroundImage: "none"
      })), theme.vars && _extends({}, ownerState.color === "default" && {
        "--AppBar-background": ownerState.enableColorOnDark ? theme.vars.palette.AppBar.defaultBg : joinVars(theme.vars.palette.AppBar.darkBg, theme.vars.palette.AppBar.defaultBg),
        "--AppBar-color": ownerState.enableColorOnDark ? theme.vars.palette.text.primary : joinVars(theme.vars.palette.AppBar.darkColor, theme.vars.palette.text.primary)
      }, ownerState.color && !ownerState.color.match(/^(default|inherit|transparent)$/) && {
        "--AppBar-background": ownerState.enableColorOnDark ? theme.vars.palette[ownerState.color].main : joinVars(theme.vars.palette.AppBar.darkBg, theme.vars.palette[ownerState.color].main),
        "--AppBar-color": ownerState.enableColorOnDark ? theme.vars.palette[ownerState.color].contrastText : joinVars(theme.vars.palette.AppBar.darkColor, theme.vars.palette[ownerState.color].contrastText)
      }, !["inherit", "transparent"].includes(ownerState.color) && {
        backgroundColor: "var(--AppBar-background)"
      }, {
        color: ownerState.color === "inherit" ? "inherit" : "var(--AppBar-color)"
      }, ownerState.color === "transparent" && {
        backgroundImage: "none",
        backgroundColor: "transparent",
        color: "inherit"
      }));
    });
    AppBar = React.forwardRef(function AppBar2(inProps, ref) {
      const props = useDefaultProps({
        props: inProps,
        name: "MuiAppBar"
      });
      const {
        className,
        color = "primary",
        enableColorOnDark = false,
        position = "fixed"
      } = props, other = _objectWithoutPropertiesLoose(props, _excluded);
      const ownerState = _extends({}, props, {
        color,
        position,
        enableColorOnDark
      });
      const classes = useUtilityClasses(ownerState);
      return (0, import_jsx_runtime.jsx)(AppBarRoot, _extends({
        square: true,
        component: "header",
        ownerState,
        elevation: 4,
        className: clsx_default(classes.root, className, position === "fixed" && "mui-fixed"),
        ref
      }, other));
    });
    true ? AppBar.propTypes = {
      // ┌────────────────────────────── Warning ──────────────────────────────┐
      // │ These PropTypes are generated from the TypeScript type definitions. │
      // │    To update them, edit the d.ts file and run `pnpm proptypes`.     │
      // └─────────────────────────────────────────────────────────────────────┘
      /**
       * The content of the component.
       */
      children: import_prop_types.default.node,
      /**
       * Override or extend the styles applied to the component.
       */
      classes: import_prop_types.default.object,
      /**
       * @ignore
       */
      className: import_prop_types.default.string,
      /**
       * The color of the component.
       * It supports both default and custom theme colors, which can be added as shown in the
       * [palette customization guide](https://mui.com/material-ui/customization/palette/#custom-colors).
       * @default 'primary'
       */
      color: import_prop_types.default.oneOfType([import_prop_types.default.oneOf(["default", "inherit", "primary", "secondary", "transparent", "error", "info", "success", "warning"]), import_prop_types.default.string]),
      /**
       * If true, the `color` prop is applied in dark mode.
       * @default false
       */
      enableColorOnDark: import_prop_types.default.bool,
      /**
       * The positioning type. The behavior of the different options is described
       * [in the MDN web docs](https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning).
       * Note: `sticky` is not universally supported and will fall back to `static` when unavailable.
       * @default 'fixed'
       */
      position: import_prop_types.default.oneOf(["absolute", "fixed", "relative", "static", "sticky"]),
      /**
       * The system prop that allows defining system overrides as well as additional CSS styles.
       */
      sx: import_prop_types.default.oneOfType([import_prop_types.default.arrayOf(import_prop_types.default.oneOfType([import_prop_types.default.func, import_prop_types.default.object, import_prop_types.default.bool])), import_prop_types.default.func, import_prop_types.default.object])
    } : void 0;
    AppBar_default = AppBar;
  }
});

// node_modules/@mui/material/AppBar/index.js
var init_AppBar2 = __esm({
  "node_modules/@mui/material/AppBar/index.js"() {
    init_AppBar();
    init_appBarClasses();
    init_appBarClasses();
  }
});

export {
  getAppBarUtilityClass,
  appBarClasses_default,
  AppBar_default,
  init_AppBar2 as init_AppBar
};
//# sourceMappingURL=chunk-YQY6W4P5.js.map
